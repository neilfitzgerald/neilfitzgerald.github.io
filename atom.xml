<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil Fitzgerald on ...</title>
  <subtitle>Quality, Testing, Software Development, Photography, and more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://neilfitzgerald.github.io/"/>
  <updated>2017-04-02T16:19:33.000Z</updated>
  <id>https://neilfitzgerald.github.io/</id>
  
  <author>
    <name>Neil Fitzgerald</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mistakes get repeated</title>
    <link href="https://neilfitzgerald.github.io/2017/04/02/Mistakes-get-repeated/"/>
    <id>https://neilfitzgerald.github.io/2017/04/02/Mistakes-get-repeated/</id>
    <published>2017-04-02T17:19:33.000Z</published>
    <updated>2017-04-02T16:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of the strategies I find myself returning to for testing is looking at the kinds of mistakes that are made. Often a pattern can be found. Individuals tend to make the same type of mistake over and over. For groups, areas that are complex are repeatedly forgotten when the connection to the current change is not obvious. </p>
<p>There are many strategies to help counter this tendency to repeat mistakes. If the problem is common across the group a checklist can be very effective as a short term fix. If it’s particular to an individual, collaborating on a strategy that works for them often is effective.</p>
<p>It reflects on the maturity and experience of the developer on how open they are to feedback. A good developer is always looking to up their game. They will find ways change their process to reduce their errors. </p>
<p>The industry has already identified a number of of practices that can reduce errors, and have automated solutions. Unit testing and checking code coverage is one such practice. Static code analysis such as using a linter is another. Considering how a problem can be avoided by automating a process. </p>
<p>How software is designed can have a big impact on errors. Prefer designs that are simple, or require all parts to be properly updated for new functionality to be added.</p>
<h2 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h2><ul>
<li>Its human nature to make the same type of mistakes.</li>
<li>Being mindful about why a mistake happened can lead to process or behavior changes that reduce the likelihood of the same type of mistake in the future.</li>
<li>Some upfront thought to design, process, and tooling can help reduce mistakes during implementation and ongoing development.</li>
</ul>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><a href="http://www.theatlantic.com/science/archive/2016/02/why-mistakes-are-often-repeated/470778/" target="_blank" rel="external">Why Mistakes Are Often Repeated</a>. (February 25, 2016). Olga Khazan. In The Atlantic. Retrieved April 2, 2017.</li>
<li><a href="https://www.psychologytoday.com/blog/anger-in-the-age-entitlement/201410/how-we-make-the-same-mistakes-over-and-over" target="_blank" rel="external">How We Make the Same Mistakes Over and Over</a>. (October 31, 2011). Steven Stosny, Ph.D.<br>In Psychology Today. Retrieved April 2, 2017.</li>
<li><a href="http://wiki.c2.com/?WhyDoPeopleMakeSoManyMistakes" target="_blank" rel="external">Why Do People Make So Many Mistakes?</a> (n.d.). In Wiki. Retrieved April 2, 2017.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the strategies I find myself returning to for testing is looking at the kinds of mistakes that are made. Often a pattern can be fo
    
    </summary>
    
    
      <category term="On Process" scheme="https://neilfitzgerald.github.io/tags/On-Process/"/>
    
      <category term="Software Development Lifecycle" scheme="https://neilfitzgerald.github.io/tags/Software-Development-Lifecycle/"/>
    
      <category term="Quality" scheme="https://neilfitzgerald.github.io/tags/Quality/"/>
    
      <category term="Process" scheme="https://neilfitzgerald.github.io/tags/Process/"/>
    
      <category term="Bugs" scheme="https://neilfitzgerald.github.io/tags/Bugs/"/>
    
      <category term="Best Practices" scheme="https://neilfitzgerald.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="https://neilfitzgerald.github.io/2017/04/02/Introduction/"/>
    <id>https://neilfitzgerald.github.io/2017/04/02/Introduction/</id>
    <published>2017-04-02T16:49:13.000Z</published>
    <updated>2017-04-02T16:26:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi, I’m Neil. I work at <a href="http://www.vistaprint.com/" target="_blank" rel="external">Vistaprint</a>. I spend most of my time writing software or tools to help test other software. </p>
<p>I’m not a great writer. I tend to have poor transitions and leave things out. I use too many big words and long sentences. I’m working on it.</p>
<p>I’ve worked in the software industry for over 20 years. I’ve been around the block a bit. During that time I’ve had enough experiences with testing, software quality, and management to develop some thoughts on these topics. I plan to focus this blog mostly on these topics.</p>
<p>I’m constantly having to learn new technologies, and will likely will include some stuff on that too.</p>
<p>I’m into photography, kayaking and travel, go see my G+ for more of that. I took the picture that is used as the background on the about page.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi, I’m Neil. I work at &lt;a href=&quot;http://www.vistaprint.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vistaprint&lt;/a&gt;. I spend most of my time writi
    
    </summary>
    
    
      <category term="Bio" scheme="https://neilfitzgerald.github.io/tags/Bio/"/>
    
      <category term="Objective" scheme="https://neilfitzgerald.github.io/tags/Objective/"/>
    
  </entry>
  
  <entry>
    <title>The Fit Process</title>
    <link href="https://neilfitzgerald.github.io/2017/04/01/The-Fit-Process/"/>
    <id>https://neilfitzgerald.github.io/2017/04/01/The-Fit-Process/</id>
    <published>2017-04-01T22:14:30.000Z</published>
    <updated>2017-04-01T21:17:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Early in my career I worked for a company that tried to adopt the ISO 9000 standard to drive the software development process. I was already working on a disaster project, with both poor design and implementation. Rather than help correct course on the project the attempt to adopt the standard added to the chaos. Progress on the project was already crawling, ground to almost a halt. The sign-off process required by the standard significantly slowed decision making and getting things done. Reams of write once, read never paperwork was generated. When an ISO 9000 auditor was brought in, the project manager generated lots of post facto records simply to comply with the standard and pass the audit.</p>
<p>All the work to comply with the standard resulted in negative quality results. All the projects in the department were delayed in delivery, with negative to no increase in quality. The paper work requirements proved to be an excessive burden for the quality goals for the projects in our department. The incentives as setup for the audit and standard did not generate a virtuous cycle of improvement, rather it created incentives to circumvent the process and emphasised compliance with the process, rather than doing what was right to deliver the projects meeting the delivery and quality goals of the company.</p>
<p>More recently I have worked for companies that have adopted aspects of agile processes. In general, the more the process is attempted to be applied cookie cutter as described in its idealized form, the less successful it tended to be. Agile process tends to be more successful, when practices are adopted when they make sense for a project, and with flexibility to adjust and adapt the practices to fit the character, development, and goals of a team.</p>
<h2 id="Key-learnings-about-process"><a href="#Key-learnings-about-process" class="headerlink" title="Key learnings about process:"></a>Key learnings about process:</h2><ul>
<li>Don’t do process for processes sake. A process is there to serve a purpose, not to be the purpose.</li>
<li>Don’t lose the point of a process.<ul>
<li>If you don’t know the why of the process, you don’t know if it’s really needed.</li>
</ul>
</li>
<li>Good process addresses and leverages human behavioral tendencies.<ul>
<li>Making the process the path of least resistance, it helps with adoption.</li>
<li>The longer the process and more complex the process the less likely people are to follow it.</li>
</ul>
</li>
<li>Strive for tools that support the process.<ul>
<li>Make it easy</li>
<li>Make the process unnecessary</li>
</ul>
</li>
<li>Just enough process to herd the cats, but no more.</li>
</ul>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><a href="https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/" target="_blank" rel="external">Why “Agile” and especially Scrum are terrible.</a> (June 6, 2015). Michael O. Church. Retrieved April 1, 2017.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Early in my career I worked for a company that tried to adopt the ISO 9000 standard to drive the software development process. I was alre
    
    </summary>
    
    
      <category term="On Process" scheme="https://neilfitzgerald.github.io/tags/On-Process/"/>
    
      <category term="Software Development Lifecycle" scheme="https://neilfitzgerald.github.io/tags/Software-Development-Lifecycle/"/>
    
      <category term="Quality" scheme="https://neilfitzgerald.github.io/tags/Quality/"/>
    
      <category term="Process" scheme="https://neilfitzgerald.github.io/tags/Process/"/>
    
      <category term="Management" scheme="https://neilfitzgerald.github.io/tags/Management/"/>
    
  </entry>
  
</feed>
